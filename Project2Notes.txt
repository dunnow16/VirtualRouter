
Make routers correct route traffic. Don't do anything at the start.
Look up where to send packet, and then send, and so on to get to 
the destination. Need mac addr: get using arp protocol. Send a msg
to it to return this addr. Be able to send the msg across. 
part 1: icmp echo request and arp request traffic handled, put into
ping packet. Need to parse headers of packet to see what type. Get type
out and check if it's ip or arp (like lab 4). 
ntohs: get 2 byte numbers sent in right order.
ethernet: 6 b dest, 6 b source, 2 byte type
-type: if 8 prints, must have 0x0800 (was 0x0008)
short type = ntohs(eth->ether_type) // network to host order?
see ETHERTYPE_IP, etc in ethernet.h file to see what you should find
char buf[1500]
recv(s, buf, ..)
struct ether_header e* = buf;  // this works
memcpy(e, buf, 14)
struct iphdr *ip = &buf[14] // length of ethernet hdr (starts where it ends)
memcpy(ip, &buf[14], 20)
/link/ip/transport/data/  (ip header order)
with arp: start after ether hdr
struct ether_arp {} // contains arphdr struct
icmp:
check if the type in the header similarly
if dest is you, respond to it by flipping src and dst
icmp struct hard to work with, may want to make your own
networksorcery.com: good info on icmp and more. has diagram hdrs
-definitions of all the fields
 -rfcs: standards for network protocols above link layer
 -ieee standards: used for link layer and below
 lang: not java, python, c, c++ (map data structure useful)

nc: arbitrary tcp and udp connections and listens
nc -l portnumber  (listen for incoming connection on port given)
nc ipaddr port 
end connection with eof   
seems to send with ip protocol 6 or arp requests

Part 3:
add ttl to packet, recalc checksum
send error msg back when some conditions occur: look at source addr and send err msg back to source. Includes ICMP msgs,
ICMP error msg:
eth / ip / icmp / ip copied from original packet / 8 bytes from original packet (following ip header) (headers)
- copy 28 bytes to get last 2 header parts
-ping will print out host/network unreachable if set up correctly
-traceroute another good way to test: 
icmp: includes type, code (depends on error) 
-subtract 1 from ttl each time
Error types: (3)
make icmp packet and send to dest at ip layer. 
1) if ttl <=1, don't forward, discard, send err msg (type = 11, code = 0)
2) dest unreachable: 
- type = 3, code: 0 if network unreachable (not in table)
3) no response from arp request: code = 1 (host unreachable)
- id and sequence are

-id and sequence set to 0 for all error types used?

TESTING:
traceroute: ex) on h1 to h5, it sends packets of ttl of 1, gives correct if ttl exceeded msgs done correctly. apt get install traceroute to get on mininet.  
ping -t2: test, may also use 1. 
ping [wrong addr]: test other error types to get network unreachable (not in table). Test no arp response by finding in table but no host match.

checksum: part of icmp header and ip. Use same function with dif inputs. ICMP includes icm to end. IP only includes ip header. 

