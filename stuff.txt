//struct ether_header
//   uint8_t  ether_dhost[ETH_ALEN];	/* destination eth addr	*/
//   uint8_t  ether_shost[ETH_ALEN];	/* source ether addr	*/
//   uint16_t ether_type;		        /* packet type ID field	*/

// struct iphdr {
// #if defined(__LITTLE_ENDIAN_BITFIELD)
// 	__u8	ihl:4,
// 		version:4;
// #elif defined (__BIG_ENDIAN_BITFIELD)
// 	__u8	version:4,
//   		ihl:4;
// #else
// #error	"Please fix <asm/byteorder.h>"
// #endif
// 	__u8	tos;
// 	__u16	tot_len;
// 	__u16	id;
// 	__u16	frag_off;
// 	__u8	ttl;
// 	__u8	protocol;
// 	__u16	check;
// 	__u32	saddr;
// 	__u32	daddr;
// 	/*The options start here. */
// };

//struct arphdr
// ether_arp something
//unsigned short int ar_op;		/* ARP opcode (command).  */
// unsigned short int ar_hrd;		/* Format of hardware address.  */
// unsigned short int ar_pro;		/* Format of protocol address.  */
// unsigned char ar_hln;		/* Length of hardware address.  */
// unsigned char ar_pln;		/* Length of protocol address.  */

// #define	arp_hrd	ea_hdr.ar_hrd
// #define	arp_pro	ea_hdr.ar_pro
// #define	arp_hln	ea_hdr.ar_hln
// #define	arp_pln	ea_hdr.ar_pln
// #define	arp_op	ea_hdr.ar_op

//struct ether_arp

// uint8_t arp_sha[ETH_ALEN];	/* sender hardware address */
// uint8_t arp_spa[4];		/* sender protocol address */
// uint8_t arp_tha[ETH_ALEN];	/* target hardware address */
// uint8_t arp_tpa[4];		/* target protocol address */

struct ouricmp {  // 64 bytes
    u_int8_t type;
    u_int8_t code;
    u_int16_t checksum;
    u_int16_t id;
    u_int16_t sequence;
};

